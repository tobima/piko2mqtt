// Code generated by "stringer -type=DxsID"; DO NOT EDIT.

package dxs

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Serial-16777728]
	_ = x[ArticleNo-16777472]
	_ = x[TypeName-16780544]
	_ = x[FwVersion-16779265]
	_ = x[HwVersion-16779266]
	_ = x[UiVersion-16779267]
	_ = x[ParVersion-16779268]
	_ = x[Mac-117440811]
	_ = x[InvName-16777984]
	_ = x[Ai1-167772417]
	_ = x[Ai2-167772673]
	_ = x[Ai3-167772929]
	_ = x[Ai4-167773185]
	_ = x[State-16780032]
	_ = x[CountrySetting-16779521]
	_ = x[CountrySettingText-16779522]
	_ = x[OpHours-251658496]
	_ = x[TotalYield-251658753]
	_ = x[DailyYield-251658754]
	_ = x[DC1_I-33555201]
	_ = x[DC1_U-33555202]
	_ = x[DC1_P-33555203]
	_ = x[DC2_I-33555457]
	_ = x[DC2_U-33555458]
	_ = x[DC2_P-33555459]
	_ = x[DC3_I-33555713]
	_ = x[DC3_U-33555714]
	_ = x[DC3_P-33555715]
	_ = x[DC_P-33556736]
	_ = x[AC_P-67109120]
	_ = x[AC_F-67110400]
	_ = x[Cos_phi-67110656]
	_ = x[Limit-67110144]
	_ = x[L1_U-67109378]
	_ = x[L1_I-67109377]
	_ = x[L1_P-67109379]
	_ = x[L2_U-67109634]
	_ = x[L2_I-67109633]
	_ = x[L2_P-67109635]
	_ = x[L3_U-67109890]
	_ = x[L3_I-67109889]
	_ = x[L3_P-67109891]
	_ = x[LogEntries-234881792]
	_ = x[LogEntry0-234881537]
	_ = x[LogEntry1-234881538]
	_ = x[LogEntry2-234881539]
	_ = x[LogEntry3-234881540]
	_ = x[LogEntry4-234881541]
	_ = x[LogEntry5-234881542]
	_ = x[LogEntry6-234881543]
	_ = x[LogEntry7-234881544]
	_ = x[LogEntry8-234881545]
	_ = x[LogEntry9-234881546]
}

const _DxsID_name = "ArticleNoSerialInvNameFwVersionHwVersionUiVersionParVersionCountrySettingCountrySettingTextStateTypeNameDC1_IDC1_UDC1_PDC2_IDC2_UDC2_PDC3_IDC3_UDC3_PDC_PAC_PL1_IL1_UL1_PL2_IL2_UL2_PL3_IL3_UL3_PLimitAC_FCos_phiMacAi1Ai2Ai3Ai4LogEntry0LogEntry1LogEntry2LogEntry3LogEntry4LogEntry5LogEntry6LogEntry7LogEntry8LogEntry9LogEntriesOpHoursTotalYieldDailyYield"

var _DxsID_map = map[DxsID]string{
	16777472:  _DxsID_name[0:9],
	16777728:  _DxsID_name[9:15],
	16777984:  _DxsID_name[15:22],
	16779265:  _DxsID_name[22:31],
	16779266:  _DxsID_name[31:40],
	16779267:  _DxsID_name[40:49],
	16779268:  _DxsID_name[49:59],
	16779521:  _DxsID_name[59:73],
	16779522:  _DxsID_name[73:91],
	16780032:  _DxsID_name[91:96],
	16780544:  _DxsID_name[96:104],
	33555201:  _DxsID_name[104:109],
	33555202:  _DxsID_name[109:114],
	33555203:  _DxsID_name[114:119],
	33555457:  _DxsID_name[119:124],
	33555458:  _DxsID_name[124:129],
	33555459:  _DxsID_name[129:134],
	33555713:  _DxsID_name[134:139],
	33555714:  _DxsID_name[139:144],
	33555715:  _DxsID_name[144:149],
	33556736:  _DxsID_name[149:153],
	67109120:  _DxsID_name[153:157],
	67109377:  _DxsID_name[157:161],
	67109378:  _DxsID_name[161:165],
	67109379:  _DxsID_name[165:169],
	67109633:  _DxsID_name[169:173],
	67109634:  _DxsID_name[173:177],
	67109635:  _DxsID_name[177:181],
	67109889:  _DxsID_name[181:185],
	67109890:  _DxsID_name[185:189],
	67109891:  _DxsID_name[189:193],
	67110144:  _DxsID_name[193:198],
	67110400:  _DxsID_name[198:202],
	67110656:  _DxsID_name[202:209],
	117440811: _DxsID_name[209:212],
	167772417: _DxsID_name[212:215],
	167772673: _DxsID_name[215:218],
	167772929: _DxsID_name[218:221],
	167773185: _DxsID_name[221:224],
	234881537: _DxsID_name[224:233],
	234881538: _DxsID_name[233:242],
	234881539: _DxsID_name[242:251],
	234881540: _DxsID_name[251:260],
	234881541: _DxsID_name[260:269],
	234881542: _DxsID_name[269:278],
	234881543: _DxsID_name[278:287],
	234881544: _DxsID_name[287:296],
	234881545: _DxsID_name[296:305],
	234881546: _DxsID_name[305:314],
	234881792: _DxsID_name[314:324],
	251658496: _DxsID_name[324:331],
	251658753: _DxsID_name[331:341],
	251658754: _DxsID_name[341:351],
}

func (i DxsID) String() string {
	if str, ok := _DxsID_map[i]; ok {
		return str
	}
	return "DxsID(" + strconv.FormatInt(int64(i), 10) + ")"
}
